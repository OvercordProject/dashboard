#!/usr/bin/env node
/* eslint-disable no-shadow */

require('dotenv').config();
const debug = require('debug')('overcord:www');
const fs = require('fs');
const http = require('http');
const models = require('../../db/models');
const settings = require('../../db/settings');
const app = require('../app');

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

if (!fs.existsSync(settings.db.path)) {
  fs.mkdirSync(settings.db.path);
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      debug(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  debug(`${process.env.BASE_URL}`);
}

models.sequelize
  .sync()
  .then(() => {
    debug('Database synchronization succeeded.');

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => {
    debug(`Database synchronization failed: ${err}`);
  });
